class LinkedList {
    field Link first;
    field Link current;

    constructor LinkedList new() {
        let first = null;
        let current = first;
        return this;
    }

    method boolean isEmpty() {
        return first = null;
    }

    method void resetCounter() {
        let current = first;
        return;
    }

    method void destroyCurrent() {
        var Link _p;
        var Link _n;
        let _p = current.getPrev();
        let _n = current.getNext();
        if(~(_p = null)) {
            do _p.setNext(_n);
        }
        if(~(_n = null)) {
            do _n.setPrev(_p);
        }
        do current.dispose();
        let current = _n;
        return;
    }

    method Link next() {
        if(current = null) {
            return null;
        }
        let current = current.getNext();
        return current;
    }

    method void dispose() {
        if(~(first = null)) {
            do first.dispose();
        }
        do Memory.dealloc(this);
        return;
    }

    method void insertRock(Rock _r) {
        var Link link;
        let link = Link.newRockLink(_r);
        let first = link;
        return;
    }

    method void insertLaser(Laser _l) {
        var Link link;
        let link = Link.newLaserLink(_l);
        do first.setPrev(link);
        do link.setNext(first);
        let first = link;
        return;
    }

    method Link pop() {
        var Link _f;
        let _f = first;
        let first = first.getNext();
        return _f;
    }

    method Link peek() {
        let current = first;
        return first;
    }
}
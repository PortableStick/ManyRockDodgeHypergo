class Laser {
    field boolean hasHit;
    field int location;
    field int memAddress;
    field int speed;

    constructor Laser new(int _l, int _s) {
        let location = _l;
        let speed = _s;
        let hasHit = false;
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method int getLocation() {
        return location;
    }

    method void setHit() {
        let hasHit = true;
        return;
    }

    method void fire() {
        do draw();
        do Sys.wait(speed);
        while(~(hasHit)) {
            do clear();
            let location = location - 512;
            if(location > 0) {
                do draw();
                do Sys.wait(speed);
            } else {
                let hasHit = true;
                do dispose();
            }
        }
        return;
    }

    method void draw() {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 128);
        do Memory.poke(memAddress+128, 128);
        do Memory.poke(memAddress+160, 128);
        do Memory.poke(memAddress+192, 128);
        do Memory.poke(memAddress+224, 128);
        do Memory.poke(memAddress+256, 128);
        do Memory.poke(memAddress+288, 128);
        do Memory.poke(memAddress+320, 128);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void clear() {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
}